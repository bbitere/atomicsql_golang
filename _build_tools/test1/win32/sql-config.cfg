#  this is a config file
# output file

$ SqlOutputFile = %SRCDIR_PATH%\tests\test1\atomicsql_ormdefs\DbContext_lambdaQueries.gen.go

# golang | ts
$ TypeLang = golang

# postgres | mysql | mssql
$ SqlLang = %SQL_LANG%

#directory with the source that need to be scanned. use ; to add more paths
$ SourcePathDir  = %SRCDIR_PATH%\tests\test1\test_where;%SRCDIR_PATH%\tests\test1\test_crud

#directory with models
$ SourcePathDir2 = %SRCDIR_PATH%\tests\test1\mymodels

#directory with atomic sql orm engine.
$ OrmDir_Atomicsql  		 		= %SRCDIR_PATH%\src\atomicsql
$ OrmDir_Atomicsql_Git  			= github.com/bbitere/atomicsql_golang.git/src/atomicsql
#$ OrmDir_Atomicsql_Metadata		= github.com/bbitere/atomicsql_golang.git/src/atomicsql/atomicsql.metadata

$ OrmDir_AtomicsqlFunc  		 	= %SRCDIR_PATH%\src\atomicsql_func
$ OrmDir_AtomicsqlFunc_Git  		= github.com/bbitere/atomicsql_golang.git/src/atomicsql_func
#$ OrmDir_AtomicsqlFunc_Metadata	= github.com/bbitere/atomicsql_golang.git/src/atomicsql_func/atomicsql_func.metadata

$ RootProject = %SRCDIR_PATH%\
#location for do import the packages
$ GitProject  = github.com/bbitere/atomicsql_golang.git

$ SCHEMA_DEFS = ""

$ Class_Base_MODEL = Generic_MODEL

#----------------------------------------------------------------------------------
@ Include_files
%SRCDIR_PATH%\tests\test1\atomicsql_ormdefs\DBContext.gen.go

@#@

# the config paths are until here!!!
#----------------------------------------------------------------------------------
#----------------------------------------------------------------------------------
#----------------------------------------------------------------------------------
#----------------------------------------------------------------------------------
@ Templ_GoSqlCompiledFile

/* this class is generated automatically by compiler AtomicSql.exe exporter*/

package atomicsql_sqldefs
	import (
		orm	 "github.com/bbitere/atomicsql_golang.git/src/atomicsql"
	)

func (_this *DBContext) LoadCompiledQuery(){

	_this.CompiledSqlQueries	= map[string]orm.TCompiledSqlQuery{
		@@{allQueries}
	}
	
	_this.DBContextBase.ProcessCompiledQuery( &_this.CompiledSqlQueries, false );
}

func (_this *DBContext) CompiledQueries_GetDialectName(){{ return "@@{dialectName}"; }}


@#@

#----------------------------------------------------------------------------------
@ Templ_GoSqlCompiledQuery
		"@@{queryTag}": 
		{
			//CompiledQuery: @@{querySql},
			CompiledQuery:`@@{querySqlBase64}`,
			
			SelectSqlFields: @@{querySelectSqlFields},
			
			Fields:			@@{queryFields},
			ExternVar:			[]orm.TExternVar{
								@@{queryVars} 
								},
			Tag: 			"@@{queryTag1}",
			File: 			"@@{queryFile}",
			StartOff: 		@@{queryFileStartOffset},
			EndOff:  		@@{queryFileEndOffset},
			Hash:  			"@@{queryHash}",
		},
@#@


#----------------------------------------------------------------------------------
@ Templ_GoSqlVarDef
									{VarName:"@@{varName}", VarType:"@@{varType}"},
@#@

		
