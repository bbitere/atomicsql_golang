
#  this is a config file

# type of sql lang: postgres, mysql
$ SqlLang = mongodb

# connection string for postgresssql DB
$ ConnectionString = %CONNECTION_STRING%

$ OutputDBContextFile   = %SRCDIR_PATH%\src\atomicsql_ormdefs\DbContextNSql.gen.go
$ ModelsOutputDir 		= %SRCDIR_PATH%\src\mymodels
$ Models_Extension 		= .gen.go
$ DirJsons    			= %SRCDIR_PATH%\_db_jsons
$ DBTable				= DBTableNoSql
$ DBContextBase			= DBContextBaseNoSql

#base for all models, this is how idetify a struct that is a model (golang)
$ BaseModelName = Generic_MODEL

#import packets for go lang
$ FullName_PackageModels 	= %GITHUB_URL%/tests/test1/src/mymodels
$ FullName_PackageGenSql 	= %GITHUB_URL%/tests/test1/src/atomicsql_sqldefs
$ FullName_PackageOrm    	= %GITHUB_URL%/src/atomicNSql
$ FullName_PackageAtmsql   	= %GITHUB_URL%/src/atomicsql


#$ RootProject = %SRCDIR_PATH%
#$ GitProject  = %GITHUB_URL%
$ DELIMETER   = @@@@@@@@######@@@@@@


#----------------------------------------------------------------------------------
@ Templ_GoLangOrmFile 
/* this class is generated automatically by DB_Tool.exe exporter*/

		package @@{package}

		import (
					
			@@{pkgModels} "@@{import_package_models}"
			@@{pkgOrm}	  "@@{import_package_orm}"
			atomicsql "github.com/bbitere/atomicsql_golang.git/src/atomicsql"
		)
//------------------------------------------------------

		type DBContextNSql struct {
			@@{pkgOrm}.DBContextBaseNoSql

			@@{tables_def1}
		}		
		func (_this *DBContextNSql) Constr(dbBase orm.DBContextBaseNoSql)  (*DBContextNSql,error) {
		
			_this.DBContextBaseNoSql = dbBase;
			_this.DBContextBaseNoSql.AllTables = make( map[string]*orm.DBTableNoSql[atomicsql.IGeneric_MODEL])
			
			var sqlSchemaDef atomicsql.TSchemaDef = atomicsql.TSchemaDef{
				@@{schemaDef}
			}
			@@{tables_DefVar}
			/*
			_this.DBContextBaseNoSql.FOREIGN_KEYS = map[string]orm.TForeignKey{
				{txtForeignKeys}
			}
			/*
			_this.DBContextBaseNoSql.DictTablesIncludeRelDefs	= map[string]*orm.TDefIncludeRelation{
				{txtIncludeRelation}
			}
			*/
			
			_, err := _this.DBContextBaseNoSql.Constr( dbBase.Dialect, sqlSchemaDef, _this)
			
			_this.LoadCompiledQuery();
			
			return _this, err
		}
		func New_DBContextNSql(dbBase orm.DBContextBaseNoSql) (*DBContextNSql, error) {
			
			ret, err := (new(DBContextNSql)).Constr(dbBase)
			
			@@{init_tables}
			
			return ret, err
		}		
		func (_this *DBContextNSql) Close(){
			
			/*_this.DBContextBaseNoSql.Db.Close()*/
		}
		func (_this *DBContextNSql) GetSqlName() string{
			return "@@{sqlName}";
		}

@#@

#----------------------------------------------------------------------------------
@ Templ_GoLangModelFile 
/* this class is generated automatically by DB_Tool.exe exporter*/

    package @@{packageName}
	import (
        "reflect"
        orm	  "@@{import_package_orm}"
    )
        /*@@{pkgImport}*/
	/*
    type @@{nameModel} struct /*atomicsql-table:"@@{tableSqlName}"* / {
	        orm.@@{baseMode}
	        @@{txtFieldsModel}
    }
	*/
    func (model  @@{nameModel}) GetID() int64 {
	    return int64( model.@@{primaryKey} )
    }
	func (model  @@{nameModel}) SetID( id int64 ) {
	    model.@@{primaryKey} = @@{primaryKeyType}(id)
    }

    type @@{PREF_DEF}@@{nameModel} struct {
	        
			orm.Generic_Def
	        @@{txtDefModel}
    }
	
	func (_this *@@{PREF_DEF}@@{nameModel}) Def() *orm.TDefIncludeRelation{
        return &orm.TDefIncludeRelation{ 
            
            ValueDef: reflect.ValueOf( *_this),
			SqlTable:	"@@{tableSqlName}",
            FnNewInst:	func(bFull bool)any{ 
				var model = new (@@{nameModel});
				if( bFull ){
					@@{txtInitializeModel_FK}
				}
				return model;
			},
        }
    }
@#@


#----------------------------------------------------------------------------------
@ Templ_GoLang_SchemaDefItem

	"@@{table_langName}": orm.TDefTable{
			SchemaTable:           "@@{table_schema}",
			SqlTableName:          "@@{table_sqlName}",
			PrimaryColumnLangName: "@@{table_primaryCol_langName}",
			PrimaryColumnSqlName:  "@@{table_primaryCol_sqlName}",
			Columns: []orm.TSqlColumnDef{
				@@{schemaDefItem_cols}
			},
		},
@#@

#----------------------------------------------------------------------------------
@ Templ_GoLang_SchemaDefItem_Col
				{
					LangName:   "@@{col_LangName}",
					SqlName:    "@@{col_SqlName}",
					SqlType:    "@@{col_SqlType}",
					LangType:   "@@{col_LangType}",
					Flags:      "",
					IsPrimary:  @@{col_IsPrimary},
					IsNullable: @@{col_IsNullable},
					ForeignKeyLangName:@@{col_foreignKeyLangName},
				},
@#@

#----------------------------------------------------------------------------------
@ Templ_GoLang_ForeignKey
				
				"@@{fk}":
				{  
					TgtTable_sqlName:"@@{tgtTable_sqlName}", 
					TgtFldID_sqlName:"@@{tgtFldID_sqlName}", 
					
					RootFldFk_sqlName:"@@{rootFldFk_sqlName}", 
					RootTable_sqlName:"@@{rootTable_sqlName}", 
					
					RootFldFk_langName:"@@{rootFldFk_langName}", 
					RootFldFk_lang2Name:"@@{rootFldFk_lang2Name}", 
				},
				
@#@
	


