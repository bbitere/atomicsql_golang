#  this is a config file
# output file

$ SqlOutputFile = C:\Work\atomicsql_golang\library\tests\test1\src\atomicsql_ormdefs\DbContextNSql_lambdaQueries.gen.go

# golang | ts
$ TypeLang = golang

# postgres | mysql | mssql | mongodb
$ SqlLang = mongodb

#directory with the source that need to be scanned. use ; to add more paths
$ SourcePathDir  = C:\Work\atomicsql_golang\library\tests\test1\src\test_where_nosql;

#directory with models
$ SourcePathDir2 = C:\Work\atomicsql_golang\library\tests\test1\src\mymodels

#directory with atomic sql orm engine.
$ OrmDir_Atomicsql  		 		= C:\Work\atomicsql_golang\library\src\atomicsql
$ OrmDir_Atomicsql_Git  			= github.com/bbitere/atomicsql_golang.git/src/atomicsql
$ OrmDir_AtomicNSql_Git  			= github.com/bbitere/atomicsql_golang.git/src/atomicNSql
#$ OrmDir_Atomicsql_Metadata		= %GITHUB_URL%/src/atomicsql/atomicsql.metadata

$ OrmDir_AtomicsqlFunc  		 	= C:\Work\atomicsql_golang\library\src\atomicsql_func
$ OrmDir_AtomicsqlFunc_Git  		= github.com/bbitere/atomicsql_golang.git/src/atomicsql_func
#$ OrmDir_AtomicsqlFunc_Metadata	= %GITHUB_URL%/src/atomicsql_func/atomicsql_func.metadata

$ RootProject = C:\Work\atomicsql_golang\library\tests\test1\src
#location for do import the packages
$ GitProject  = github.com/bbitere/atomicsql_golang.git/tests/test1/src

$ SCHEMA_DEFS = ""

$ Class_Base_MODEL = Generic_MODEL

#----------------------------------------------------------------------------------
@ Include_files
C:\Work\atomicsql_golang\library\tests\test1\src\atomicsql_ormdefs\DBContextNSql.gen.go

@#@

# the config paths are until here!!!
#----------------------------------------------------------------------------------
#----------------------------------------------------------------------------------
#----------------------------------------------------------------------------------
#----------------------------------------------------------------------------------
@ Templ_GoSqlCompiledFile

/* this class is generated automatically by compiler AtomicSql goscanner.exe exporter*/

package atomicsql_sqldefs
	import (
		orm	 "github.com/bbitere/atomicsql_golang.git/src/atomicsql"
	)

func (_this *DBContextNSql) LoadCompiledQuery(){

	_this.DBContextBaseNoSql.CompiledSqlQueries	= map[string]orm.TCompiledSqlQuery{
		@@{allQueries}
	}
	
	_this.DBContextBaseNoSql.ProcessCompiledQuery( &_this.DBContextBaseNoSql.CompiledSqlQueries, false );
}

func (_this *DBContextNSql) CompiledQueries_GetDialectName() string { return "@@{dialectName}"; }


@#@

#----------------------------------------------------------------------------------
@ Templ_GoSqlCompiledQuery
		"@@{queryTag}": 
		{
			//CompiledQuery: @@{querySql},
			CompiledQuery:`@@{querySqlBase64}`,			
			SelectSqlFields: @@{querySelectSqlFields},
			OrderedFields:	[]string{ @@{orderedFields} },
			Fields:			@@{queryFields},
			ExternVar:			[]orm.TExternVar{
								@@{queryVars} 
								},
			Tag: 			"@@{queryTag1}",
			File: 			"@@{queryFile}",
			StartOff: 		@@{queryFileStartOffset},
			EndOff:  		@@{queryFileEndOffset},
			Hash:  			"@@{queryHash}",
			IsQryS:			@@{queryIsQryS},
			SubQueries: 	@@{querySubQueries},
			NosqlQuery: 	@@{queryNosqlQuery},
		},
@#@


#----------------------------------------------------------------------------------
@ Templ_GoSqlVarDef
									{VarName:"@@{varName}", VarType:"@@{varType}"},
@#@

#----------------------------------------------------------------------------------
@ Templ_SubQueries
		[]orm.TSubQuery{
				@@{queries}
			}
@#@
#----------------------------------------------------------------------------------
@ Templ_SubQuery		
				{ 
					VariableName : "@@{varName}",
				},
@#@
#----------------------------------------------------------------------------------
